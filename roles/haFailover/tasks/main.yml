---
- name: High Avaibilty Failover to "{{ haFailover_primary }}"
  win_command: >
    SQLCMD.EXE  -S "{{ haFailover_listener }}" -q "
    :Connect {{ haFailover_listener }}

    :Connect {{ haFailover_primary }}

    ALTER AVAILABILITY GROUP [{{ haFailover_group }}] FAILOVER;
    
    GO
    
    GO"
  register: haFailover_output
  become: yes
  become_method: runas

#if the stdout array has more then 2 elements, there might be a problem
- name: check if failover succeed
  assert:
    that:
     - "haFailover_output.stdout_lines | length == 2"
    fail_msg: "FAIL \n {{ haFailover_output.stdout }}"
    success_msg: "SUCCESS" 

# rerun this query until there is no instance with the state NOT_HEALTHY
- name: query HA health
  win_command: SQLCMD.EXE -S "{{ haFailover_listener }}" -q "select synchronization_health_desc from sys.dm_hadr_availability_replica_states"
  register: haFailover_health_output
  until: haFailover_health_output.stdout.find('NOT_HEALTHY') == -1
  retries: 10
  delay: 1
  become: yes
  become_method: runas

